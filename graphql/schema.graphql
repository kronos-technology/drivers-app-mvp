type Product @aws_api_key @aws_cognito_user_pools {
  id: ID!
  name: String!
  description: String!
  price: Float!
  category: String!
  sku: String
  inventory: Int
}

input ProductInput {
  id: ID
  name: String!
  description: String!
  price: Float!
  category: String!
  sku: String
  inventory: Int
}

input UpdateProductInput {
  id: ID!
  name: String
  description: String
  price: Float
  category: String
  sku: String
  inventory: Int
}

type Driver @aws_api_key @aws_cognito_user_pools {
  id: ID!
  name: String!
  last_name: String!
  company: String
  vehicle: String
  birthdate: AWSDate
  status: String
}

input DriverInput {
  id: ID!
  name: String!
  last_name: String!
  company: String!
  vehicle: String
  birthdate: AWSDate
  status: String
}

input UpdateDriverInput {
  id: ID!
  name: String
  last_name: String
  company: String
  vehicle: String
  birthdate: AWSDate
  status: String
}

type Vehicle @aws_api_key @aws_cognito_user_pools {
  plate: ID!
  current_driver: String
  last_driver: String
  number: String!
  last_maintenance: AWSDate
  status: String
}

input VehicleInput {
  plate: ID!
  company: String!
  current_driver: String
  last_driver: String
  number: String!
  last_maintenance: AWSDate
  status: String
}

input UpdateVehicleInput {
  plate: ID!
  company: String
  current_driver: String
  last_driver: String
  number: String
  last_maintenance: AWSDate
  status: String
}

type Company @aws_api_key @aws_cognito_user_pools {
  id: ID!
  phone: AWSPhone!
  name: String!
  city: String!
  address: String!
  nit: String!
  vehicles: [String]
  drivers: [String]
}

input CompanyInput {
  id: ID!
  phone: AWSPhone!
  name: String!
  city: String!
  address: String!
  nit: String!
  vehicles: [String]
  drivers: [String]
}

input UpdateCompanyInput {
  id: ID!
  phone: AWSPhone
  name: String
  city: String
  address: String
  nit: String
  vehicles: [String]
  drivers: [String]
}

type Route @aws_api_key @aws_cognito_user_pools {
  id: ID!
  origin: String!
  destination: String!
  geojson: String!
}

input RouteInput {
  id: ID!
  origin: String!
  destination: String!
  geojson: String!
}

input UpdateRouteInput {
  id: ID!
  origin: String
  destination: String
  geojson: String
}

type Query {
  getProductById(productId: ID!): Product @aws_api_key @aws_cognito_user_pools
  listProducts: [Product] @aws_api_key @aws_cognito_user_pools
  productsByCategory(category: String!): [Product]
    @aws_api_key
    @aws_cognito_user_pools
  getDriverById(productId: ID!): Driver @aws_api_key @aws_cognito_user_pools
  listDriversByCompany(companyId: ID!): [Driver]
    @aws_api_key
    @aws_cognito_user_pools
  listDrivers: [Driver] @aws_api_key @aws_cognito_user_pools
}

type Mutation {
  createProduct(product: ProductInput!): Product
    @aws_cognito_user_pools(cognito_groups: ["Admin"])
  deleteProduct(productId: ID!): ID
    @aws_cognito_user_pools(cognito_groups: ["Admin"])
  updateProduct(product: UpdateProductInput!): Product
    @aws_cognito_user_pools(cognito_groups: ["Admin"])
  createDriver(driver: DriverInput!): Driver
    @aws_cognito_user_pools(cognito_groups: ["Admin"])
  deleteDriver(driverId: ID!): ID
    @aws_cognito_user_pools(cognito_groups: ["Admin"])
  updateDriver(driver: UpdateProductInput!): Driver
    @aws_cognito_user_pools(cognito_groups: ["Admin"])
}

type Subscription {
  onCreateProduct: Product @aws_subscribe(mutations: ["createProduct"])
}
